import React, { useState } from 'react';
import Button from '../../../components/ui/Button';
import Input from '../../../components/ui/Input';
import Icon from '../../../components/AppIcon';

const NewsGenerator = () => {
  const [n8nWebhookUrl, setN8nWebhookUrl] = useState('');
  const [isConnected, setIsConnected] = useState(false);
  const [generatedNews, setGeneratedNews] = useState([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [newsPrompt, setNewsPrompt] = useState('');

  const connectN8n = async () => {
    if (!n8nWebhookUrl) {
      alert('Please enter n8n webhook URL');
      return;
    }

    try {
      // Test n8n connection
      const response = await fetch(n8nWebhookUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'test_connection',
          source: 'eyecare_pro'
        }),
      });

      if (response.ok) {
        setIsConnected(true);
        localStorage.setItem('n8nWebhook', n8nWebhookUrl);
        alert('Successfully connected to n8n!');
      } else {
        throw new Error('Connection failed');
      }
    } catch (error) {
      console.error('n8n connection error:', error);
      alert('Failed to connect to n8n. Please check the webhook URL.');
    }
  };

  const generateNews = async () => {
    if (!isConnected) {
      alert('Please connect to n8n first');
      return;
    }

    if (!newsPrompt.trim()) {
      alert('Please enter a news prompt');
      return;
    }

    setIsGenerating(true);

    try {
      // Send request to n8n for news generation
      const response = await fetch(n8nWebhookUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          action: 'generate_news',
          prompt: newsPrompt,
          category: 'eyecare',
          timestamp: new Date().toISOString()
        }),
      });

      if (response.ok) {
        // Simulate generated news for demo
        const mockNews = {
          id: Date.now(),
          title: `AI Generated: ${newsPrompt}`,
          content: `This is AI-generated content based on your prompt: "${newsPrompt}". The content would be generated by your n8n workflow using AI services like OpenAI, Claude, or other AI providers.`,
          category: 'AI Generated',
          author: 'n8n AI Workflow',
          timestamp: new Date().toISOString(),
          image: 'https://images.unsplash.com/photo-1677442136019-21780ecad995?w=400&h=200&fit=crop'
        };

        setGeneratedNews(prev => [mockNews, ...prev]);
        setNewsPrompt('');
        alert('News generated successfully!');
      } else {
        throw new Error('News generation failed');
      }
    } catch (error) {
      console.error('News generation error:', error);
      alert('Failed to generate news. Please try again.');
    } finally {
      setIsGenerating(false);
    }
  };

  const publishToFeed = (newsItem) => {
    // In a real app, this would add the news to the community feed
    console.log('Publishing to community feed:', newsItem);
    alert('News published to community feed!');
  };

  const deleteNews = (newsId) => {
    setGeneratedNews(prev => prev.filter(news => news.id !== newsId));
  };

  return (
    <div className="space-y-6">
      {/* n8n Connection */}
      <div className="bg-card border border-border rounded-lg p-6">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold text-foreground">n8n AI Workflow</h3>
          <div className={`flex items-center space-x-2 px-3 py-1 rounded-full text-sm ${
            isConnected 
              ? 'bg-success/10 text-success' 
              : 'bg-muted text-muted-foreground'
          }`}>
            <div className={`w-2 h-2 rounded-full ${
              isConnected ? 'bg-success' : 'bg-muted-foreground'
            }`} />
            <span>{isConnected ? 'Connected' : 'Disconnected'}</span>
          </div>
        </div>

        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-foreground mb-2">
              n8n Webhook URL
            </label>
            <div className="flex space-x-2">
              <Input
                value={n8nWebhookUrl}
                onChange={(e) => setN8nWebhookUrl(e.target.value)}
                placeholder="https://your-n8n-instance.com/webhook/news-generator"
                disabled={isConnected}
                className="flex-1"
              />
              {!isConnected && (
                <Button onClick={connectN8n}>
                  <Icon name="Link" size={16} className="mr-2" />
                  Connect
                </Button>
              )}
            </div>
          </div>

          {isConnected && (
            <div className="bg-success/5 border border-success/20 rounded-lg p-4">
              <div className="flex items-center space-x-2">
                <Icon name="CheckCircle" size={16} className="text-success" />
                <span className="text-sm text-success">
                  Connected to n8n workflow for AI news generation
                </span>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* News Generation */}
      <div className="bg-card border border-border rounded-lg p-6">
        <h3 className="text-lg font-semibold text-foreground mb-4">Generate News</h3>
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-foreground mb-2">
              News Prompt
            </label>
            <div className="flex space-x-2">
              <Input
                value={newsPrompt}
                onChange={(e) => setNewsPrompt(e.target.value)}
                placeholder="e.g., Latest trends in contact lens technology"
                className="flex-1"
              />
              <Button 
                onClick={generateNews}
                disabled={!isConnected || isGenerating}
              >
                {isGenerating ? (
                  <>
                    <Icon name="Loader2" size={16} className="mr-2 animate-spin" />
                    Generating...
                  </>
                ) : (
                  <>
                    <Icon name="Sparkles" size={16} className="mr-2" />
                    Generate
                  </>
                )}
              </Button>
            </div>
          </div>

          {/* Quick Prompts */}
          <div>
            <p className="text-sm font-medium text-foreground mb-2">Quick Prompts:</p>
            <div className="flex flex-wrap gap-2">
              {[
                'New eye care technology trends',
                'Seasonal eye health tips',
                'Contact lens care guidelines',
                'Digital eye strain solutions',
                'Pediatric eye care updates'
              ].map((prompt) => (
                <button
                  key={prompt}
                  onClick={() => setNewsPrompt(prompt)}
                  className="px-3 py-1 text-sm bg-muted hover:bg-muted/80 rounded-full transition-colors"
                >
                  {prompt}
                </button>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Generated News */}
      {generatedNews.length > 0 && (
        <div className="bg-card border border-border rounded-lg p-6">
          <h3 className="text-lg font-semibold text-foreground mb-4">Generated News</h3>
          <div className="space-y-4">
            {generatedNews.map((news) => (
              <div key={news.id} className="border border-border rounded-lg p-4">
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-2">
                      <span className="px-2 py-1 text-xs font-medium bg-primary/10 text-primary rounded-full">
                        {news.category}
                      </span>
                      <span className="text-xs text-muted-foreground">
                        {new Date(news.timestamp).toLocaleString()}
                      </span>
                    </div>
                    <h4 className="font-semibold text-foreground mb-2">{news.title}</h4>
                    <p className="text-sm text-muted-foreground mb-3">{news.content}</p>
                    <p className="text-xs text-muted-foreground">By {news.author}</p>
                  </div>
                  {news.image && (
                    <img 
                      src={news.image} 
                      alt={news.title}
                      className="w-20 h-20 rounded-lg object-cover ml-4"
                    />
                  )}
                </div>
                <div className="flex items-center justify-between mt-4 pt-3 border-t border-border">
                  <div className="flex space-x-2">
                    <Button 
                      size="sm" 
                      onClick={() => publishToFeed(news)}
                      className="flex items-center space-x-1"
                    >
                      <Icon name="Send" size={14} />
                      <span>Publish to Feed</span>
                    </Button>
                  </div>
                  <Button 
                    size="sm" 
                    variant="ghost" 
                    onClick={() => deleteNews(news.id)}
                    className="text-destructive hover:text-destructive"
                  >
                    <Icon name="Trash2" size={14} />
                  </Button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* n8n Workflow Guide */}
      <div className="bg-card border border-border rounded-lg p-6">
        <h3 className="text-lg font-semibold text-foreground mb-4">n8n Workflow Setup</h3>
        <div className="space-y-3 text-sm text-muted-foreground">
          <div className="flex items-start space-x-3">
            <div className="w-6 h-6 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-xs font-medium mt-0.5">
              1
            </div>
            <div>
              <p className="font-medium text-foreground">Create n8n Workflow</p>
              <p>Set up a workflow with Webhook trigger → AI node (OpenAI/Claude) → Response</p>
            </div>
          </div>
          
          <div className="flex items-start space-x-3">
            <div className="w-6 h-6 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-xs font-medium mt-0.5">
              2
            </div>
            <div>
              <p className="font-medium text-foreground">Configure AI Prompt</p>
              <p>Create a prompt template for generating eye care related news content</p>
            </div>
          </div>
          
          <div className="flex items-start space-x-3">
            <div className="w-6 h-6 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-xs font-medium mt-0.5">
              3
            </div>
            <div>
              <p className="font-medium text-foreground">Get Webhook URL</p>
              <p>Copy the webhook URL from your n8n workflow and paste it above</p>
            </div>
          </div>
          
          <div className="flex items-start space-x-3">
            <div className="w-6 h-6 rounded-full bg-primary text-primary-foreground flex items-center justify-center text-xs font-medium mt-0.5">
              4
            </div>
            <div>
              <p className="font-medium text-foreground">Test & Generate</p>
              <p>Connect the workflow and start generating AI-powered news content</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default NewsGenerator; 